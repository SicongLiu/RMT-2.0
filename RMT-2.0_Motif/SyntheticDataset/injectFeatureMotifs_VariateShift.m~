clc;
clear;

% pick a multi-variate feature
% cut off time sigma, inject as a multi-scale features, options for
% different variate groups injections as well

% FeaturePath = 'D:\Motif_Results\Datasets\Mocap\Features_RMT\1_euclid\';
current_OS = 'Mac'; % windows
TimeSeriesIndex = 2;
TS_name = num2str(TimeSeriesIndex);
% TEST = ['Mocap_test7', TS_name];
TEST_1 = ['Energy_Building', num2str(1)];
TEST_2 = ['Energy_Building', num2str(2)];
% FeaturePath = 'D:\Motif_Results\Datasets\Mocap\Features_RMT';
FeaturePath = '/Users/sliu104/Desktop/EnergyTestData/RMT';
FeaturePath = [FeaturePath, '/', num2str(TimeSeriesIndex), '/'];
% DestDataPath = 'D:\Motif_Results\Datasets\SynteticDataset\data';
% DestDataPath = 'D:\Motif_Results\Datasets\SynteticDataset\data';
DestDataPath = '/Users/sliu104/Desktop/EnergyTestData/InjectedFeatures';

motifInjectionOption = 'Random'; % 'RoundRobin'
kindofBasicTS = 'randomWalk'; %'Sinusoidal';%'flat';%
if(strcmp(kindofBasicTS, 'flat') == 1)
    KindOfDataset = 'FlatTS_MultiFeatureDiffClusters\';
elseif(strcmp(kindofBasicTS, 'Sinusoidal') == 1)
    KindOfDataset = 'CosineTS_MultiFeatureDiffClusters\';%
elseif(strcmp(kindofBasicTS, 'randomWalk') == 1)
    KindOfDataset = 'RandomWalkTS_MultiFeatureDiffClusters\';%
end

% two values below not 1 or 0 at the same
multiScaleFeatureInjection = 0; % 0;
differentVariateGroupInjection = 1; % 0

sinFreq = 1;

% pick features from higher octaves
DepdO = 2; % octave depd
TimeO = 2; % octave time

NumInstances = 10; % inject into 10 locations
dpscale = [];
frame1 = [];

% read the depd involved for the corresponding features
% dpscale = csvread(strcat(FeaturePath, 'DistancesDescriptor\DepdScale_IM_', TS_name, '_DepO_', num2str(DepdO), '_TimeO_', num2str(TimeO), '.csv'));
dpscale = csvread(strcat(FeaturePath, 'DistancesDescriptor/DepdScale_IM_', TS_name, '_DepO_', num2str(DepdO), '_TimeO_', num2str(TimeO), '.csv'));

savepath1 = [FeaturePath, 'feature_', TS_name, '.mat'];
savepath2 = [FeaturePath, 'idm_', TS_name, '.mat'];
savepath3 = [FeaturePath, 'MetaData_', TS_name, '.mat'];
load(savepath1);
load(savepath2);
load(savepath3);

% load metadata graph
metadataPath = [FeaturePath, 'idm_', num2str(TimeSeriesIndex), '.mat'];
idm = load(metadataPath);
idm = idm.idm1;

% So far only use features from higher octaves
indexfeatureGroup = (frame1(6,:) == TimeO & frame1(5,:) == DepdO);
featuresOfInterest = frame1(:, indexfeatureGroup);

[rows, columns] = size(featuresOfInterest);

% put time lengths and different variates check
% if they share the same variate or length keep looping

timeLengthFlag = 1;
variateFlag = 1;

% datarows : variates
% datacoln : time stamps
[datarows, datacoln] = size(data);

if(strcmp(kindofBasicTS, 'randomWalk') == 1)
    % rndWalks = rndWalkGeneration(size(data,1), 2 * size(data,2)); % generate random walk z-normalized
    
    % rndWalks1 : 0 - 1
    % rndWalks2 : scaled range
    % both same size as original data
    [rndWalks1,rndWalks2] = rndWalkGenerationbigSize(size(data,1),size(data,2),data);
end

origRW1 = rndWalks1;
origRW2 = rndWalks2;

% FeatPositions: class label, time center of original features, time start, time end
FeatPositions = zeros(NumInstances, 4);

% avoid injecting features in the same position
Step = floor(size(rndWalks1, 2) / NumInstances); 

% count the injection location
pStep = 0; 

if(multiScaleFeatureInjection == 1)
    % pick different locations, same group of variate for injection
    sameVariateGroup = 1;
    
    cutOffRate = 0.5;
    % pick features of different time scales
    [patternFeature, patternVariates] = pickLargestTimeSimgaFeaturesCutOff(featuresOfInterest, dpscale, cutOffRate);
    [rndWalks, FeatPositions, injectedVariates] = featureInject(patternFeature, patternVariates, sameVariateGroup, NumInstances, rndWalks, FeatPositions, data, idm, DepdO);
end

if(differentVariateGroupInjection == 1)
    % pick different locations, different group of variates for injection
    sameVariateGroup = 0;
    
    % pick feature that covers the smallest portion of variates
    [patternFeature, patternVariates] = pickSmallestVariateCoverageFeatures(featuresOfInterest, dpscale);
    [rndWalks1, FeatPositions1, injectedVariates1] = featureInject(patternFeature, patternVariates, sameVariateGroup, NumInstances, rndWalks1, FeatPositions, data, idm, DepdO);
    
    [rndWalks2, FeatPositions2, injectedVariates2] = featureInject(patternFeature, patternVariates, sameVariateGroup, NumInstances, rndWalks2, FeatPositions, data, idm, DepdO);
end


if (strcmp(current_OS, 'windows') == 1)
    
else
    
end
if(exist([DestDataPath,'/IndexEmbeddedFeatures/',TEST_1,'/'],'dir')==0)
    mkdir([DestDataPath,'/IndexEmbeddedFeatures/',TEST_1,'/']);
end
if(exist([DestDataPath,'\IndexEmbeddedFeatures\',TEST_2,'\'],'dir')==0)
    mkdir([DestDataPath,'\IndexEmbeddedFeatures\',TEST_2,'\']);
end


csvwrite([DestDataPath,'\',TEST_1,'.csv'],rndWalks1);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\','rndData_',TEST_1,'.csv'],origRW1);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\',TEST_1,'\','FeaturePosition_',TEST_1,'.csv'],FeatPositions1);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\',TEST_1,'\','patternDpscale_',TEST_1,'.csv'],patternVariates);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\',TEST_1,'\','injectedDpscale_',TEST_1,'.csv'], injectedVariates1);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\',TEST_1,'\','FeaturesEmbedded_',TEST_1,'.csv'],patternFeature);

csvwrite([DestDataPath,'\',TEST_2,'.csv'],rndWalks2);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\','rndData_',TEST_2,'.csv'],origRW2);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\',TEST_2,'\','FeaturePosition_',TEST_2,'.csv'],FeatPositions2);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\',TEST_2,'\','patternDpscale_',TEST_2,'.csv'],patternVariates);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\',TEST_2,'\','injectedDpscale_',TEST_2,'.csv'], injectedVariates2);
csvwrite([DestDataPath,'\IndexEmbeddedFeatures\',TEST_2,'\','FeaturesEmbedded_',TEST_2,'.csv'],patternFeature);

fprintf('Manual injection done .\n');